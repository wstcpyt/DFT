=jasp= is an extension module for ase.calculators.vasp.  Its primary purpose is smarter restarting capability, and job management/workflow, but it also has some enhanced capability too.

1. jasp automatically changes into the calculation directory to run jobs, and automatically changes back out when it is done.
2. jasp automatically submits jobs to the queue, and supports parallel and multiprocessing jobs.
3. jasp supports a lot more data extraction than ase.calculators.vasp.

jasp requires python 2.6+ to work, and the latest svn version of ase.

* Installing jasp
** stable
2. Installation  requirement:
You need to install vasp (commercial codes see http://cms.mpi.univie.ac.at) 
and ASE  (see https://wiki.fysik.dtu.dk/ase/download.html )

Make sure you can run VASP from the command line, make sure the ase tests pass. 

Python modules that jasp depends on:
ase
numpy
matplotlib

Optional:
scipy (for thermodynamics)
Cheetah - for database, webapps
apsw - sqlite3 interface for database
pyxser (for serializing to xml)
django (for web apps)
webob (for web apps)

3. Installation :

If you have git installed:

pip install -e git+git://github.com/jkitchin/jasp.git#egg=jasp

Otherwise, do this
#+BEGIN_SRC sh
pip install https://github.com/jkitchin/jasp/zipball/master
#+END_SRC
** dev
pip install -e git+https://github.com/jkitchin/jasp.git@dev#egg=jasp
pip install -e git+git://github.com/jkitchin/jasp.git@dev#egg=jasp


** Configuring jasp
Create an executable script named runvasp.py on your executable path.  This script is typically located in $HOME/bin

The script simply needs to run your vasp executable in the current directory.
Here is an example file that chooses between serial and parallel executables depending on environment variables that are present in the TORQUE queue system:

#+BEGIN_SRC python
#!/usr/bin/env python
import os

serial_vasp = '/home/jkitchin/src/vasp/bin/vasp_serial_intel_mkl'
parallel_vasp = '/home/jkitchin/src/vasp/bin/vasp_openmpi_intel_mkl'

if 'PBS_NODEFILE' in os.environ:
    NPROCS = len(open(os.environ['PBS_NODEFILE']).readlines())

    if NPROCS == 1:
        print 'NPROCS = ',NPROCS
        exitcode = os.system(serial_vasp)
    else:
        print 'NPROCS = ',NPROCS
        parcmd = 'mpirun -np %i %s' % (NPROCS,parallel_vasp)
        exitcode = os.system(parcmd)
else:
    exitcode = os.system(serial_vasp)
#end
#+END_SRC

Add  to your $HOME/.bashrc these commands:

#+BEGIN_SRC sh
export VASP_SCRIPT=/your path to runvasp.py/runvasp.py  # example $HOME/bin/runvasp.py

#+END_SRC

Create $HOME/.jasprc file. This hidden file contains the following informtation:

#+BEGIN_EXAMPLE
# jasp configuration file
# adjust these for the your system
vasp.executable.serial = /opt/kitchingroup/vasp-5.2.12/build/bin/vasp-vtst
vasp.executable.parallel = /home/jkitchin/src/vasp/bin/vasp_openmpi_intel_mkl

user.name = jkitchin
user.email = jkitchin@andrew.cmu.edu

mode = queue   # run|queue|None

multiprocessing.cores_per_process = None

# these are only needed if you run in a queue
queue.command = qsub
queue.options = -joe
queue.walltime = 168:00:00
queue.nodes = 1
queue.ppn = 1
queue.mem = 2GB
queue.jobname = None
#+END_EXAMPLE

* Uninstalling jasp
#+BEGIN_SRC sh
pip uninstall jasp
#+END_SRC
* Examples of using jasp
see http://jkitchin.github.io/dft-book

* Long-term plans for jasp
Everything that is in jasp may eventually be incorporated into ase.calculators.vasp. jasp will probably always be further on the development cycle than the ase.calculators.vasp. We try advanced concepts in workflow in jasp that may never be suitable for ase. We try using the latest features of python to see if it makes running calculations easier, faster or better in some way. ase strives to maintain a lot of compatibility with older python versions. jasp will not be constrained this way.
* Files

[[./__init__.py]] - just imports everything from jasp

[[./jasp.py]]
Contains the JASP class and jasp context manager. Code to see if calculation finished ok. Code to see if you are in a vasp directory. Is also an executable script that runs jasp

[[./jasprc.py]] - configuration for jasp

[[./jasp_extensions.py]] - monkey patches to ase.calculators.vasp, hook functions, run and calculate function, pretty print functions. some additional get functions.

[[./jasp_kpts.py]] - fixes some issues with writing, reading kpts. new function to create grid from kpt density

[[./read_vasprun.py]] - reads the vasprun.xml file

[[./metadata.py]] - creates METADATA file

[[./serialize.py]] - provides serialization (representing calculator as xml, json, or python code

[[./jasp_atoms.py]] - monkey patches to ase.Atom and ase.Atoms. adds set_volume, a better __repr__, and a different atoms equality check.

[[./POTCAR.py]] - some functions to parse POTCAR files for data

[[./CHG.py]] - reads CHCAR, computes dipole moment

[[./volumetric_data.py]] - reads volumetric data from vasp calculations

[[./jasp_vib.py]] - get vibrational modes, frequencies, infrared intensities

[[./thermodynamics.py]] - work in progress to describe free energy of solids

[[./jasp_neb.py]] - provides nudged elastic band to jasp

[[./jasp_eos.py]] - automates equation of state calculations in a multistep process

[[./jasp_bandstructure.py]] - automates band structure calculations and plots

[[./database.py]] - provides some capabilities to interface jasp with sqlite

[[./vc]] - directory containing two attempts to integrate git version control with jasp

[[./www]] - contains two efforts to create browser applications to serve vasp data

[[./vasp-mode]] - emacs major mode for VASP input files
