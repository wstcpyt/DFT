#!/usr/bin/env python
'''
command to summarize a vasp calculation in a directory

usage:
jaspsum
   this will summarize the calculation in the current directory

jaspsum directoryname
   this will summarize the calculation in the directoryname

see jaspsum -h for all the options.
'''
import os, sys
from jasp import *
import argparse


# this should not start calculations
JASPRC['mode'] = None


parser = argparse.ArgumentParser(description='summarize jasp calculations')

parser.add_argument('-d', '--debug', action='store_true',
                    help = 'turn debug on')

parser.add_argument('-p', '--plot', action='store_true',
                    help = 'plot in ag')

parser.add_argument('-t', '--plot-trajectory', action='store_true',
                    help = 'plot trajectory')

parser.add_argument('-r', '--python', action='store_true',
                    help = 'prints code to make a new calculation')

parser.add_argument('-j','--json', action='store_true',
                    help = 'prints json representation')

parser.add_argument('-pj','--pretty-json', action='store_true',
                    help = 'prints pretty json representation')

parser.add_argument('-x', '--xml', action='store_true',
                    help = 'prints xml representation')

parser.add_argument('-v', '--vib',
                    nargs=1, default=None,
                    help = 'animate a vibrational mode, args= comma-separated list, e.g. 1,2,3')

parser.add_argument('--neb', action='store_true',
                    help = 'plot the neb')

parser.add_argument('--eos', action='store_true',
                    help = 'run/plot equation of state')

parser.add_argument('dirs', nargs='*',
                    default = ['.'],
                    help='directories to summarize')

args = parser.parse_args()

if args.debug:
    debug = logging.DEBUG
else:
    debug = None

for d in args.dirs:
    if not os.path.isdir(d):
        raise Exception('{0} does not exist!'.format(d))

    with jasp(d, debug=debug) as calc:

        # plot trajectory
        if args.plot_trajectory:
            xd = xdat2traj('out.traj',calc=calc)
            try:
                xd.convert()
                os.system('ase-gui out.traj; rm out.traj')
            except ValueError:
                print('unable to show trajectory')

        # plot the atoms
        if args.plot:
            atoms = calc.get_atoms()
            from ase.visualize import view
            view(atoms)

        # vibrational movies
        if args.vib is not None:
            for mode in [int(x) for x in args.vvib.split(',')]:
                calc.get_vibrational_modes(mode, show=True)

        if args.neb:
            calc.plot_neb()

        if args.eos:
            from jasp.jasp_eos import *
            JASPRC['mode']='queue'
            try:
                data = calc.get_eos()
                print(data)
            except (VaspSubmitted, VaspQueued, VaspRunning):
                print('job in the queue')
            import sys; sys.exit()

        # Finally print the calculator in some representation
        if args.python:
            print((repr(calc)))
            
        elif args.json:
            import jasp.serialize 
            print((calc.json))
            
        elif args.pretty_json:
            import jasp.serialize
            print((calc.pretty_json))
            
        elif args.xml:
            import jasp.serialize 
            print((calc.xml))

        else:
            print(calc)
